-----------------------------  Sisteme de Operare ------------------------------

Tema 1 : Multi-platform Development
Nume : Niculescu
Prenume : Mihai Alexandru
Grupa : 325CB
Sistem de operare : Ubuntu 18.04 LTS 64bit
Editor : CLion

--------------------------------------------------------------------------------


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Structura Temei  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

.
├── GNUmakefile
├── Makefile
├── README
└── src
    ├── hashtabel
    │   ├── hash.h
    │   ├── hashtable.c
    │   └── hashtable.h
    ├── linkedlist
    │   ├── linkedlist.c
    │   └── linkedlist.h
    ├── main.c
    ├── parser
    │   ├── parser.c
    │   └── paser.h
    └── utils
        └── utils.h

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  Descriere >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Tema implementeaza o tabela dispersie. Cum dimensiunea unui bucket se
modifica in timpul executiei programului, am implementat si structura de date
LinkedList. HashTable reprezentand un vector, array, "de liste de cuvinte".
    In fisierul main.c se initializeza tabela si se citeste/verifica argumentele
de la linia de comanda. Daca nu s-a reusit alocarea hash-ului sau argumentele
sunt incorecte se returneza EXIT_ERROR. Functia care citeste din fisierele care
se pot deschide, este read_from_file (din fisierul parser.c ). Functia
efectueaza fiecare opratiune asupra tabelei de dispersie operatiune.
    La final se dezaloca memeria pentru hash.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     LinkedList     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Director: linkedlist
    Implementarea pentru TDA : List. Structura este declarata in linkedlist.h.
Lista este formata din noduri, celule. Fiecare celula este fomata dintr-un
pointer pentru a indica urmatoarea celula si informatia, info, din celula
curenta.
Operatiunile asupra listei:

*) add_word : adaugarea in lista a cuvantului

*) find_word : cauta in lista daca exista cuvantul primit ca parametru

*) print_list : printeaza lista pe o singura linie

*) delete_word : sterge cuvantul primit ca parametru, daca exista nemodificand
pozitia celorlalte celule

*) delete_list : distruge lista

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<     HashTable      >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Director: hashtable
    Implemntarea pentru tabela. Un bucket reprezentant o lista, mai bine decat
un array de char *, trebuia sa folosesc realloc de fiecare data cand se facea
add sau remove asupra hash-ului. Majoritate opratiunilor identifica lista
corespunzatoare cuvantului si apeleaza functia specififica implenetata in
linkedlist.c. Pentru resize se creaza un noua tabela de dispersie, se parcurge
vechia tabela si se muta fiecare celula in noua tabela.
Operatiunile asupra hashtable:

*) init_hash : aloca memoria pentru un hash cu size bucke-uri

*) add : adauga un cuvant in bucket-ul corespunzator

*) find : gasirea cuvantului in table

*) delete : sterge tabla din tabela de dispersie

*) print_bucket : printeaza bucket-ul indicat

*) print : printeaza tabela de dispersie

*) resize_double | resize_halve : operatiunile de resize

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Parser >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Directior : parser
    Pasarea inputului este relizata in parser.c. Exista functia isNumber care
verifica daca este un numar naturar intreg. Pentru fiecare comanda, mai putin
clear, exita o functie care verifica daca argumente sunt corecte si exista, apoi
efectueaza operatiunea/comanda aspra tabele sau fierelor de iesire. Citirea
linie cu linei este realizata in read_from_file, linia citita daca nu este vida
este pasata da catre functia parser_command care apeleza functia corespunzatoare
fiecarei comenzi. In caz de erore sau parametru incorecti/inexistenti, fuctia
read_from_file se opreste din citirea din fisier si returneaza o valuare
negativa.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Utils >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Directior : utils
    Am implementat functia strdup, deoarece nu este in standard-ul C:
https://stackoverflow.com/questions/32944390/what-is-the-rationale-for-not-including-strdup-in-the-c-standard
http://open-std.org/JTC1/SC22/WG14/www/docs/n718.htm
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
